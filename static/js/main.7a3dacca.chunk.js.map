{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/header.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","root","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a3dacca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__35bgU\",\"card\":\"Cards_card__1yuxN\",\"infected\":\"Cards_infected__1R-4N\",\"recovered\":\"Cards_recovered__1G0sG\",\"deaths\":\"Cards_deaths__3nS_t\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return 'Loading.....'\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={ cx( styles.card, styles.infected ) }>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom> Infected </Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant='body2'> Number oF Active Cases oF COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={ cx( styles.card, styles.recovered ) }>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom> Recovered </Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant='body2'> Number oF Recoveries From COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={ cx( styles.card, styles.deaths ) }>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom> Deaths </Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant='body2'> Number oF Deaths Caused By COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async(country) => {\r\n\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try{\r\n        const { data : { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async() => {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData)=> ({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths : dailyData.deaths.total,\r\n            date : dailyData.reportDate,\r\n        }))\r\n        return modifiedData;\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() => {\r\n    try{\r\n        const { data : { countries } } = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country)=> country.name )\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = (\r\n    { \r\n    data : \r\n    { \r\n        confirmed, \r\n        recovered, \r\n        deaths \r\n    }, country }) => {\r\n    const [ dailyData, setDailyData ] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async() => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    });\r\n\r\n    const lineChart = (\r\n        dailyData.length !== 0 \r\n        ? (\r\n        <Line \r\n            data = {{\r\n                labels : dailyData.map(({ date }) => date),\r\n                datasets : [\r\n                    {\r\n                        data : dailyData.map(({ confirmed }) => confirmed),\r\n                        label : 'Infected',\r\n                        borderColor : '#3333ff',\r\n                        fill : true\r\n                    }, \r\n                    {\r\n                        data : dailyData.map(({ deaths }) => deaths),\r\n                        label : 'Deaths',\r\n                        borderColor : 'red',\r\n                        backgroundColor : 'rgba(255,0,0,0.5)',\r\n                        fill : true\r\n                    }\r\n                ],\r\n            }}\r\n        />\r\n        ) : null\r\n\r\n    );\r\n\r\n\r\n    const barChart = (\r\n        confirmed \r\n            ?(\r\n                <Bar \r\n                    data = {{\r\n                        labels : ['Infected', 'Recovered', 'Deaths'],\r\n                        datasets : [{\r\n                            label : 'People',\r\n                            backgroundColor : [ \r\n                                'rgba(0, 0, 255, 0.5)',\r\n                                'rgba(0, 255, 0, 0.5)',\r\n                                'rgba(255, 0, 0, 0.5)' \r\n                            ],\r\n                            data : [ confirmed.value, recovered.value, deaths.value ]\r\n                        }]\r\n                    }}\r\n                    options = {{\r\n                        legend : { display : false },\r\n                        title : { display : true, text : `Current State In ${country}`  }\r\n                    }}\r\n                />\r\n            )\r\n            : null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            { country ? barChart : lineChart }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React,{ useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n    const [ fetchedCountries, setFetchedCountries ] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async() => {\r\n            setFetchedCountries( await fetchCountries() )\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange = {(e) => handleCountryChange(e.target.value)} >\r\n                <option value=''>Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{ country }</option> )}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport coronaImage from './images/header.png';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data: fetchedData })\r\n    }\r\n\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({ data: fetchedData, country: country })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage} alt='COVID-19' />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} />\r\n                <div className={styles.root}>{\"Stay Home, Stay Safe From Covid-19\"}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nReactDOM.render(<App />, document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3HLy2\",\"image\":\"App_image__99PJe\",\"signimage\":\"App_signimage__3W2jm\",\"root\":\"App_root__2ftz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__22TvT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3HM0D\"};","module.exports = __webpack_public_path__ + \"static/media/header.d7265326.png\";"],"sourceRoot":""}